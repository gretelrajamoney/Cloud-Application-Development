{
	"info": {
		"_postman_id": "a811145d-f33a-4954-85f3-5779b4b26535",
		"name": "hw4_rajamong",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "add boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"boat_name\", pm.response.json()[\"name\"]);",
							"pm.environment.set(\"boat_type\", pm.response.json()[\"type\"]);",
							"pm.environment.set(\"boat_length\", pm.response.json()[\"length\"]);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for 2XX status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"   //Check if the self url is correct",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Odyssey\",\n  \"type\": \"Yatch\",\n  \"length\": 99\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for 4XX status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"object is missing one or more of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Odyssey\",\n  \"type\": \"Yatch\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat (new boat, no loads)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for success 2XX response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    //Check if the self url is correct",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"    pm.expect(pm.response.json()[\"loads\"].length).to.eq(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX not found\", function () {",
							"    //Check for 4XX response",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"no boat with this id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"   //Check if status code is 2XX",
							"   pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(24);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"tennis balls\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"10/24/2021\");",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"weight\": 24,\n    \"content\": \"tennis balls\",\n    \"delivery_date\": \"10/24/2021\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for error code 4XX",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"object is missing one or more of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"weight\": 24,\n    \"content\": \"tennis balls\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load (new load, no carrier)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check if error code is 2XX",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid and has proper self url",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(24);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"tennis balls\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"10/24/2021\");",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX not found\", function () {",
							"    //Check for 4XX status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"there is no load with this id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for error code 2XX",
							"    pm.response.to.have.status(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load with invalid boat id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"   //Check for error code 4XX",
							"   pm.response.to.have.status(404)",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for error code 4XX",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"there is no boat with this id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load with invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for error code 4XX",
							"    pm.response.to.have.status(404)",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"there is no load with this id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load with invalid boat id & invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for error code 4XX",
							"    pm.response.to.have.status(404)",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"there is no boat or load with this id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "load already assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for error code 4XX",
							"    pm.response.to.have.status(403)",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"this load was already assigned to boat\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat after load assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX status code",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"content besides loads is valid\", function () {",
							"    //Check for boat content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"loads content is valid\", function () {",
							"   //Check if load content is valid",
							"   const most_recent_load = pm.response.json()[\"loads\"][pm.response.json()[\"loads\"].length - 1];",
							"    pm.expect(most_recent_load[\"id\"]).to.eq(pm.environment.get(\"load_id\"))",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + most_recent_load[\"id\"];",
							"    pm.expect(most_recent_load[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load after assigned to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate status code 2XX",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"content besides carrier is valid\", function () {",
							"    //Check for appropriate content for load including self attribute",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(24);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"tennis balls\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"10/24/2021\");",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"carrier content is valid\", function () {",
							"    //Check for appropriate content for carrier including self attribute",
							"    const carrier = pm.response.json()[\"carrier\"];",
							"    pm.expect(carrier[\"id\"]).to.eq(pm.environment.get(\"boat_id\"))",
							"    pm.expect(carrier[\"name\"]).to.eq(pm.environment.get(\"boat_name\"))",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + carrier[\"id\"];",
							"    pm.expect(carrier[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load from boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for apprropriate status code 2XX",
							"    pm.response.to.have.status(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load after removed from boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate status code",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check for appropriate status code including self attribute",
							"   pm.expect(pm.response.json()[\"weight\"]).to.eq(24);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"tennis balls\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"10/24/2021\");",
							"    pm.expect(pm.response.json()['carrier']).to.eq(null)",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat after load removed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate status code 2XX",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    pm.expect(pm.response.json()[\"loads\"].length).to.eq(0)",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load - load not on this boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for appropriate 4XX status code",
							"    pm.response.to.have.status(404)",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"this load is not on the boat\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load with invalid boat id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for appropriate status 4XX code",
							"    pm.response.to.have.status(404)",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"there is no boat with this id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load with invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for appropriate 4XX status code",
							"    pm.response.to.have.status(404)",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for appropriate error message",
							"    pm.expect(pm.response.json()[\"error\"]).to.eq(\"there is no load with this id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load with invalid boat id & invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for appropriate 4XX status code",
							"    pm.response.to.have.status(404)",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"there is no boat with this id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "re-assign load to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX status code",
							"    pm.response.to.have.status(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX status code",
							"    pm.response.to.have.status(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load after carrier boat deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX status code",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid including self attribute",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(24);",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"tennis balls\");",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"10/24/2021\");",
							"    pm.expect(pm.response.json()['carrier']).to.eq(null)",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX not found\", function () {",
							"    //Check for appropriate 4XX status code",
							"    pm.response.to.have.status(404)",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"no boat with this id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX not found\", function () {",
							"    //Check for appropriate 4XX error message",
							"    pm.response.to.have.status(404)",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"there is no load with this id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for boat id",
							"pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"boat_name\", pm.response.json()[\"name\"]);",
							"pm.environment.set(\"boat_type\", pm.response.json()[\"type\"]);",
							"pm.environment.set(\"boat_length\", pm.response.json()[\"length\"]);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if content is valid including self attribute",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Odyssey\",\n  \"type\": \"Yatch\",\n  \"length\": 99\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load to newest boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat after load assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"content besides loads is valid\", function () {",
							"    //Check for appropriate boat content",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"loads content is valid\", function () {",
							"   //Check for appropriate load content",
							"   const most_recent_load = pm.response.json()[\"loads\"][pm.response.json()[\"loads\"].length - 1];",
							"    pm.expect(most_recent_load[\"id\"]).to.eq(pm.environment.get(\"load_id\"))",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + most_recent_load[\"id\"];",
							"    pm.expect(most_recent_load[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"   //Check for appropriate 2XX error message",
							"   pm.response.to.have.status(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat after load deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self attribute",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat_name\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat_type\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat_length\"));",
							"    pm.expect(pm.response.json()[\"loads\"].length).to.eq(0);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for boat id",
							"pm.environment.set(\"boat1_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"boat1_name\", pm.response.json()[\"name\"]);",
							"pm.environment.set(\"boat1_type\", pm.response.json()[\"type\"]);",
							"pm.environment.set(\"boat1_length\", pm.response.json()[\"length\"]);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check for appropriate content including self attribute",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat1_name\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat1_type\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat1_length\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Titanic\",\n  \"type\": \"Sailing\",\n  \"length\": 400\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load",
							"pm.environment.set(\"load1_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"load1_weight\", pm.response.json()[\"weight\"]);",
							"pm.environment.set(\"load1_content\", pm.response.json()[\"content\"]);",
							"pm.environment.set(\"load1_delivery_date\", pm.response.json()[\"delivery_date\"]);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"load01 content is valid\", function () {",
							"    //Check for appropriate content including self attribute",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(pm.environment.get(\"load1_weight\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load1_content\"));",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(pm.environment.get(\"load1_delivery_date\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"weight\": 22,\n    \"content\": \"basketballs\",\n    \"delivery_date\": \"9/15/2000\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load01 to boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat1_id}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat1_id}}",
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load2_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"load2_weight\", pm.response.json()[\"weight\"]);",
							"pm.environment.set(\"load2_content\", pm.response.json()[\"content\"]);",
							"pm.environment.set(\"load2_delivery_date\", pm.response.json()[\"delivery_date\"]);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate load content including self attribute",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(pm.environment.get(\"load2_weight\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load2_content\"));",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(pm.environment.get(\"load2_delivery_date\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"weight\": 300,\n    \"content\": \"elephants\",\n    \"delivery_date\": \"12/17/2000\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load02 to boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat1_id}}/loads/{{load2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat1_id}}",
						"loads",
						"{{load2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load",
							"pm.environment.set(\"load3_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"load3_weight\", pm.response.json()[\"weight\"]);",
							"pm.environment.set(\"load3_content\", pm.response.json()[\"content\"]);",
							"pm.environment.set(\"load3_delivery_date\", pm.response.json()[\"delivery_date\"]);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for apppropriate content with self attribute",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(pm.environment.get(\"load3_weight\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load3_content\"));",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(pm.environment.get(\"load3_delivery_date\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"weight\": 1,\n    \"content\": \"feathers\",\n    \"delivery_date\": \"03/02/2001\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load03 to boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat1_id}}/loads/{{load3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat1_id}}",
						"loads",
						"{{load3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load",
							"pm.environment.set(\"load4_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"load4_weight\", pm.response.json()[\"weight\"]);",
							"pm.environment.set(\"load4_content\", pm.response.json()[\"content\"]);",
							"pm.environment.set(\"load4_delivery_date\", pm.response.json()[\"delivery_date\"]);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check appropriate content along with self attribute",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(pm.environment.get(\"load4_weight\"));",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(pm.environment.get(\"load4_content\"));",
							"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(pm.environment.get(\"load4_delivery_date\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"weight\": 1000,\n    \"content\": \"trucks\",\n    \"delivery_date\": \"04/06/2006\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load04 to boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat1_id}}/loads/{{load4_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat1_id}}",
						"loads",
						"{{load4_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads for given boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"load01 content is valid\", function () {",
							"    //Check for appropriate load contents",
							"    pm.expect(pm.response.json()[0][\"weight\"]).to.eq(pm.environment.get(\"load1_weight\"));",
							"    pm.expect(pm.response.json()[0][\"content\"]).to.eq(pm.environment.get(\"load1_content\"));",
							"    pm.expect(pm.response.json()[0][\"delivery_date\"]).to.eq(pm.environment.get(\"load1_delivery_date\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.environment.get(\"load1_id\");",
							"    pm.expect(pm.response.json()[0][\"self\"]).to.eq(self_url);",
							"    ",
							"});",
							"",
							"pm.test(\"load02 content is valid\", function () {",
							"    //Check for appropriate load contents",
							"    pm.expect(pm.response.json()[1][\"weight\"]).to.eq(pm.environment.get(\"load2_weight\"));",
							"    pm.expect(pm.response.json()[1][\"content\"]).to.eq(pm.environment.get(\"load2_content\"));",
							"    pm.expect(pm.response.json()[1][\"delivery_date\"]).to.eq(pm.environment.get(\"load2_delivery_date\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.environment.get(\"load2_id\");",
							"    pm.expect(pm.response.json()[1][\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"load03 content is valid\", function () {",
							"   //Check for appropriate load contents",
							"   pm.expect(pm.response.json()[2][\"weight\"]).to.eq(pm.environment.get(\"load3_weight\"));",
							"    pm.expect(pm.response.json()[2][\"content\"]).to.eq(pm.environment.get(\"load3_content\"));",
							"    pm.expect(pm.response.json()[2][\"delivery_date\"]).to.eq(pm.environment.get(\"load3_delivery_date\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.environment.get(\"load3_id\");",
							"    pm.expect(pm.response.json()[2][\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"load04 content is valid\", function () {",
							"    //Check for appropriate load contents",
							"    pm.expect(pm.response.json()[3][\"weight\"]).to.eq(pm.environment.get(\"load4_weight\"));",
							"    pm.expect(pm.response.json()[3][\"content\"]).to.eq(pm.environment.get(\"load4_content\"));",
							"    pm.expect(pm.response.json()[3][\"delivery_date\"]).to.eq(pm.environment.get(\"load4_delivery_date\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.environment.get(\"load4_id\");",
							"    pm.expect(pm.response.json()[3][\"self\"]).to.eq(self_url)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat1_id}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat1_id}}",
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads for boat with invalid boat id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX not found\", function () {",
							"    //Check for appropriate 4XX status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"     //Check for appropriate status message",
							"     pm.expect(pm.response.json()[\"error\"]).to.eq(\"there is no boat with this id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads with pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"   //Check for appropriate 2XX status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"only correct number of loads in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json()[\"loads\"].length).to.eq(3);",
							"});",
							"",
							"pm.test(\"next property exists\", function () {",
							"    //Check if next property exists",
							"    pm.expect(pm.response.json().hasOwnProperty('next')).to.eq(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check appropriate environment for boat",
							"pm.environment.set(\"boat2_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"boat2_name\", pm.response.json()[\"name\"]);",
							"pm.environment.set(\"boat2_type\", pm.response.json()[\"type\"]);",
							"pm.environment.set(\"boat2_length\", pm.response.json()[\"length\"]);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check  for appropriate 2XX status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check for appropriate content including self variable",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat2_name\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat2_type\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat2_length\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"SS Sailor\",\n  \"type\": \"Fishing\",\n  \"length\": 60\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check appropriate environment for boat",
							"pm.environment.set(\"boat3_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"boat3_name\", pm.response.json()[\"name\"]);",
							"pm.environment.set(\"boat3_type\", pm.response.json()[\"type\"]);",
							"pm.environment.set(\"boat3_length\", pm.response.json()[\"length\"]);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check  for appropriate 2XX status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check for appropriate content including self variable",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat3_name\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat3_type\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat3_length\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Royal Carribean\",\n  \"type\": \"Sailing\",\n  \"length\": 100\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check appropriate environment for boat",
							"pm.environment.set(\"boat4_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"boat4_name\", pm.response.json()[\"name\"]);",
							"pm.environment.set(\"boat4_type\", pm.response.json()[\"type\"]);",
							"pm.environment.set(\"boat4_length\", pm.response.json()[\"length\"]);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check  for appropriate 2XX status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self variable",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(pm.environment.get(\"boat4_name\"));",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(pm.environment.get(\"boat4_type\"));",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(pm.environment.get(\"boat4_length\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Midnight Drifter\",\n  \"type\": \"Fishing\",\n  \"length\": 250\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats with pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"   //Check for appropriate 2XX status code",
							"   pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"only correct number of boats in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json()[\"boats\"].length).to.eq(3);",
							"});",
							"",
							"pm.test(\"next property exists\", function () {",
							"    //Check if next property exists",
							"    pm.expect(pm.response.json().hasOwnProperty('next')).to.eq(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load4_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load4_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat4_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat4_id}}"
					]
				}
			},
			"response": []
		}
	]
}