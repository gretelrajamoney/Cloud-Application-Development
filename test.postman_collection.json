{
    "info": {
        "_postman_id": "b1a930df-ce9b-46cd-a3f3-46fec38e7e68",
        "name": "final project",
        "description": "This collection tests the API specification given for Assignment 3.\nIn order to run this collection, you need an environment which has the following 3 environment variables pre-defined:\n\napp_url\n- Set this to your app. E.g., when running locally set it to http://localhost:8080. When running the app on GCP. set it to https://myapp.appsport.com\n\ninvalid_boat_id\n- Set it to a value that's not an ID of any boat in your project. I have set it to 1 and that should work for you as well.\n- \n\ninvalid_load_id\n- Set it to a value that's not an ID of any load in your porject. I have set it to 1 and that should work for you as well.\n\nChange log:\n- Oct 15, 9:30 am. Test \"edit boat with invalid id 404\" has been modified. The request body now includes all the attributes so that this test now tests only for invalid id.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [{
            "name": "add boat 201",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "4ecff411-7a3b-42dc-b33a-52116065953c",
                    "exec": [
                        "pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
                        "",
                        "pm.test(\"201 status code\", function () {",
                        "    pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
                        "    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
                        "    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
                        "    pm.expect(pm.response.json()[\"loads\"] == []);",
                        "    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"owner_auth0_id\"));",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "POST",
                "header": [{
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99,\r\n  \"loads\": [],\r\n  \"owner\": \"{{owner_auth0_id}}\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "add boat with missing attributes 400",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "4ecff411-7a3b-42dc-b33a-52116065953c",
                    "exec": [
                        "pm.test(\"400 status code\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"400 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "POST",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "add boat unauthorized 401",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "4ecff411-7a3b-42dc-b33a-52116065953c",
                    "exec": [
                        "pm.test(\"401 status code\", function () {",
                        "    pm.response.to.have.status(401);",
                        "});",
                        "",
                        "pm.test(\"401 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You must be an authorized user to create or modify a boat\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "noauth"
                },
                "method": "POST",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99,\r\n  \"loads\": [],\r\n  \"owner\": \"{{owner_auth0_id}}\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "add boat invalid JWT 401",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "4ecff411-7a3b-42dc-b33a-52116065953c",
                    "exec": [
                        "pm.test(\"401 status code\", function () {",
                        "    pm.response.to.have.status(401);",
                        "});",
                        "",
                        "pm.test(\"401 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You are not authorized to create or modify a boat owned by that user\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "owqidje12388ej219-ej21je9j2094j1",
                        "type": "string"
                    }]
                },
                "method": "POST",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99,\r\n  \"loads\": [],\r\n  \"owner\": \"{{owner_auth0_id}}\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "add boat different owner 201",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "4ecff411-7a3b-42dc-b33a-52116065953c",
                    "exec": [
                        "pm.environment.set(\"boat_id_different_owner\", pm.response.json()[\"id\"]);",
                        "",
                        "pm.test(\"201 status code\", function () {",
                        "    pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
                        "    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
                        "    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
                        "    pm.expect(pm.response.json()[\"loads\"] == []);",
                        "    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"owner2_auth0_id\"));",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token2}}",
                        "type": "string"
                    }]
                },
                "method": "POST",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99,\r\n  \"loads\": [],\r\n  \"owner\": \"{{owner2_auth0_id}}\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get boat 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "5539477a-9ff5-429b-979b-af285e94fa56",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
                        "    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
                        "    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
                        "    pm.expect(pm.response.json()[\"loads\"].length).to.eq(0);",
                        "    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"owner_auth0_id\"));",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get boat with invalid id 404",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "5539477a-9ff5-429b-979b-af285e94fa56",
                    "exec": [
                        "pm.test(\"404 not found\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "",
                        "pm.test(\"404 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{invalid_boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{invalid_boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get all boats 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "",
                        "pm.test(\"At least one boat exists\", function(){",
                        "   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
                        "});",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get all users 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "",
                        "pm.test(\"At least one boat exists\", function(){",
                        "   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
                        "});",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/users",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "users"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get users boats 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "",
                        "pm.test(\"At least one boat exists\", function(){",
                        "   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
                        "});",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/users/{{owner_auth0_id}}/boats",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "users",
                        "{{owner_auth0_id}}",
                        "boats"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "add first_load 201",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "54871a0f-16d9-421a-965f-6881e5cf0750",
                    "exec": [
                        "pm.environment.set(\"first_load_id\", pm.response.json()[\"id\"]);",
                        "",
                        "pm.test(\"201 status code\", function () {",
                        "    pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"weight\"]).to.eq(5);",
                        "    pm.expect(pm.response.json()[\"content\"]).to.eq(\"LEGO Blocks\");",
                        "    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"1/1/2020\");",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "POST",
                "header": [{
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\n   \"weight\":5,\n   \"content\":\"LEGO Blocks\",\n   \"delivery_date\":\"1/1/2020\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{app_url}}/loads",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "add second_load 201",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "54871a0f-16d9-421a-965f-6881e5cf0750",
                    "exec": [
                        "pm.environment.set(\"second_load_id\", pm.response.json()[\"id\"]);",
                        "",
                        "pm.test(\"201 status code\", function () {",
                        "    pm.response.to.have.status(201);",
                        "});",
                        "",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"weight\"]).to.eq(10);",
                        "    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Gold\");",
                        "    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"10/10/2020\");",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "POST",
                "header": [{
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\n   \"weight\":10,\n   \"content\":\"Gold\",\n   \"delivery_date\":\"10/10/2020\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{app_url}}/loads",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "add load with missing attribute 400",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "4ecff411-7a3b-42dc-b33a-52116065953c",
                    "exec": [
                        "pm.test(\"400 status code\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"400 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing a required field\");",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "POST",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/loads",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get first_load 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "5539477a-9ff5-429b-979b-af285e94fa56",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"weight\"]).to.eq(5);",
                        "    pm.expect(pm.response.json()[\"content\"]).to.eq(\"LEGO Blocks\");",
                        "    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"1/1/2020\");",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get load with invalid id 404",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "5539477a-9ff5-429b-979b-af285e94fa56",
                    "exec": [
                        "pm.test(\"404 not found\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "",
                        "pm.test(\"404 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/loads/{{invalid_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads",
                        "{{invalid_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get all loads 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "",
                        "pm.test(\"At least one load exists\", function(){",
                        "   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
                        "});",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/loads",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "put first_load into boat invalid JWT 401",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"401 status code\", function () {",
                        "    pm.response.to.have.status(401);",
                        "});",
                        "",
                        "pm.test(\"401 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You are not authorized to create or modify a boat owned by that user\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "owqidje12388ej219-ej21je9j2094j1wdw3434343",
                        "type": "string"
                    }]
                },
                "method": "PUT",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}",
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "put first_load on boat 204",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"204 status code\", function () {",
                        "    pm.response.to.have.status(204);",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PUT",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}",
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "put second_load on boat 204",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"204 status code\", function () {",
                        "    pm.response.to.have.status(204);",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PUT",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}/loads/{{second_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}",
                        "loads",
                        "{{second_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get all loads on boat 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "03270b70-8d5c-486f-a76a-1911ab52cb08",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"loads\"][0].id).to.eq(pm.environment.get(\"first_load_id\"));",
                        "    pm.expect(pm.response.json()[\"loads\"][1].id).to.eq(pm.environment.get(\"second_load_id\"));",
                        "    pm.expect(pm.response.json()[\"loads\"].length).to.eq(2);",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.environment.get(\"boat_id\") + \"/loads\";",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}/loads",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}",
                        "loads"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "put first_load into same boat again 403",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"403 status code\", function () {",
                        "    pm.response.to.have.status(403);",
                        "});",
                        "",
                        "pm.test(\"403 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified load already exists in a boat\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PUT",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}",
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "put first_load into invalid boat 404",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"404 status code\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "",
                        "pm.test(\"404 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load don't exist\");",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PUT",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{invalid_boat_id}}",
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "put invalid load into boat 404",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"404 status code\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "",
                        "pm.test(\"400 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load don't exist\");",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PUT",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}/loads/{{invalid_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}",
                        "loads",
                        "{{invalid_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "put invalid load into invalid boat 404",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"404 status code\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "",
                        "pm.test(\"400 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load don't exist\");",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PUT",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{invalid_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{invalid_boat_id}}",
                        "loads",
                        "{{invalid_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete first_load from boat unauthorized 401",
            "event": [{
                    "listen": "test",
                    "script": {
                        "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                        "exec": [
                            "pm.test(\"401 status code\", function () {",
                            "    pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"401 error message\", function () {",
                            "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You must be an authorized user to create or modify a boat\");",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "4c2c28c5-712e-4137-88df-386b897e3ff4",
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "noauth"
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}",
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete first_load from boat invalid JWT 401",
            "event": [{
                    "listen": "test",
                    "script": {
                        "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                        "exec": [
                            "pm.test(\"401 status code\", function () {",
                            "    pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"401 error message\", function () {",
                            "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You are not authorized to create or modify a boat owned by that user\");",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "4c2c28c5-712e-4137-88df-386b897e3ff4",
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "owqid13w1w1w1w1w1w1w12388ej219-rrrrrrej21je9j2094j1wdw3434343",
                        "type": "string"
                    }]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}",
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete first_load from boat 204",
            "event": [{
                    "listen": "test",
                    "script": {
                        "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                        "exec": [
                            "pm.test(\"204 status code\", function () {",
                            "    pm.response.to.have.status(204);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "4c2c28c5-712e-4137-88df-386b897e3ff4",
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}",
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get all loads on boat with one removed 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "03270b70-8d5c-486f-a76a-1911ab52cb08",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    // First load removed, only second should be left",
                        "    console.log(pm.response.json()[\"loads\"]);",
                        "    pm.expect(pm.response.json()[\"loads\"][0].id).to.eq(pm.environment.get(\"second_load_id\"));",
                        "    pm.expect(pm.response.json()[\"loads\"].length).to.eq(1);",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.environment.get(\"boat_id\") + \"/loads\";",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}/loads",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}",
                        "loads"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "add another boat 201",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "4ecff411-7a3b-42dc-b33a-52116065953c",
                    "exec": [
                        "pm.environment.set(\"boat_id_1\", pm.response.json()[\"id\"]);",
                        "",
                        "pm.test(\"201 status code\", function () {",
                        "    pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mega Boat\");",
                        "    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
                        "    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
                        "    pm.expect(pm.response.json()[\"loads\"].length).to.eq(0);",
                        "    pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"owner_auth0_id\"));",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "POST",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Mega Boat\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 200,\r\n  \"loads\": [],\r\n  \"owner\": \"{{owner_auth0_id}}\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete second_load from empty boat_id_1 403",
            "event": [{
                    "listen": "test",
                    "script": {
                        "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                        "exec": [
                            "pm.test(\"403 status code\", function () {",
                            "    pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"403 error message\", function () {",
                            "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"That load is not in the specified boat\");",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "4c2c28c5-712e-4137-88df-386b897e3ff4",
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{second_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id_1}}",
                        "loads",
                        "{{second_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "put first_load on boat with different owner 401",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"401 status code\", function () {",
                        "    pm.response.to.have.status(401);",
                        "});",
                        "",
                        "pm.test(\"401 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You are not authorized to create or modify a boat owned by that user\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PUT",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id_different_owner}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id_different_owner}}",
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "put first_load into boat unauthorized 401",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"401 status code\", function () {",
                        "    pm.response.to.have.status(401);",
                        "});",
                        "",
                        "pm.test(\"401 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You must be an authorized user to create or modify a boat\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "noauth"
                },
                "method": "PUT",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}",
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "put first_load into boat_id_1 204",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"204 status code\", function () {",
                        "    pm.response.to.have.status(204);",
                        "});",
                        "",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PUT",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id_1}}",
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get all loads on boat_id_1 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "03270b70-8d5c-486f-a76a-1911ab52cb08",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"loads\"][0].id).to.eq(pm.environment.get(\"first_load_id\"));",
                        "    pm.expect(pm.response.json()[\"loads\"].length).to.eq(1);",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.environment.get(\"boat_id_1\") + \"/loads\";",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id_1}}/loads",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id_1}}",
                        "loads"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit all loads 405",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"405 status code\", function () {",
                        "    pm.response.to.have.status(405);",
                        "});",
                        "",
                        "pm.test(\"405 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This API doesn't allow you to edit all loads!\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "PUT",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/loads",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit load weight and content 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"weight\"]).to.eq(600);",
                        "    pm.expect(pm.response.json()[\"content\"]).to.eq(\"steel\");",
                        "    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"1/1/2020\");",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "PATCH",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"weight\": 600,\r\n  \"content\": \"steel\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit load with no valid attributes 400",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"400 status code\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"400 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object has no valid attributes\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "PATCH",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"color\": \"red\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit load with invalid id 404",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"404 not found\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "",
                        "pm.test(\"404 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "PATCH",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/loads/{{invalid_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads",
                        "{{invalid_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit all load attributes 303",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"303 status code\", function () {",
                        "    pm.response.to.have.status(303);",
                        "});",
                        "",
                        "pm.test(\"content is valid, including Load-Location header\", function () {",
                        "    pm.expect(pm.response.json()[\"weight\"]).to.eq(700);",
                        "    pm.expect(pm.response.json()[\"content\"]).to.eq(\"stainless steel\");",
                        "    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"6/10/2020\");",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "PUT",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n   \"weight\":700,\r\n   \"content\":\"stainless steel\",\r\n   \"delivery_date\":\"6/10/2020\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit all load attributes again with same values 303",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"303 status code\", function () {",
                        "    pm.response.to.have.status(303);",
                        "});",
                        "",
                        "pm.test(\"content is valid, including Load-Location header\", function () {",
                        "    pm.expect(pm.response.json()[\"weight\"]).to.eq(700);",
                        "    pm.expect(pm.response.json()[\"content\"]).to.eq(\"stainless steel\");",
                        "    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"6/10/2020\");",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "PUT",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n   \"weight\":700,\r\n   \"content\":\"stainless steel\",\r\n   \"delivery_date\":\"6/10/2020\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit only one load attribute 400",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"400 bad request\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "",
                        "pm.test(\"400 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object does not have all required attributes\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "PUT",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"weight\": 800\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete first_load from boat with different owner 401",
            "event": [{
                    "listen": "test",
                    "script": {
                        "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                        "exec": [
                            "pm.test(\"401 status code\", function () {",
                            "    pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"401 error message\", function () {",
                            "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You must be an authorized user to create or modify a boat\");",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "4c2c28c5-712e-4137-88df-386b897e3ff4",
                        "exec": [
                            ""
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "noauth"
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id_different_owner}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id_different_owner}}",
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete first_load 204",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
                    "exec": [
                        "pm.test(\"204 no content\", function () {",
                        "    pm.response.to.have.status(204);",
                        "});",
                        "",
                        "pm.environment.unset(\"first_load_id\");"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/loads/{{first_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads",
                        "{{first_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get all loads on now empty boat_id_1 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "03270b70-8d5c-486f-a76a-1911ab52cb08",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"loads\"].length).to.eq(0);",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.environment.get(\"boat_id_1\") + \"/loads\";",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id_1}}/loads",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id_1}}",
                        "loads"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete second_load on invalid boat 404",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"404 status code\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "",
                        "pm.test(\"400 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load don't exist\");",
                        "});",
                        "",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{second_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{invalid_boat_id}}",
                        "loads",
                        "{{second_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete invalid load on boat_id_1 404",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"404 status code\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "",
                        "pm.test(\"400 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load don't exist\");",
                        "});",
                        "",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id_1}}/loads/{{invalid_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id_1}}",
                        "loads",
                        "{{invalid_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete boat_id_1 204",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
                    "exec": [
                        "pm.test(\"204 no content\", function () {",
                        "    pm.response.to.have.status(204);",
                        "});",
                        "",
                        "pm.environment.unset(\"boat_id_1\");"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id_1}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id_1}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "get second_load with boat_id_1 deleted 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "5539477a-9ff5-429b-979b-af285e94fa56",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"weight\"]).to.eq(10);",
                        "    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Gold\");",
                        "    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"10/10/2020\");",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/loads/{{second_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads",
                        "{{second_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete second_load 204",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
                    "exec": [
                        "pm.test(\"204 no content\", function () {",
                        "    pm.response.to.have.status(204);",
                        "});",
                        "",
                        "pm.environment.unset(\"second_load_id\");"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/loads/{{second_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads",
                        "{{second_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit all boats 405",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"405 status code\", function () {",
                        "    pm.response.to.have.status(405);",
                        "});",
                        "",
                        "pm.test(\"405 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This API doesn't allow you to edit all boats!\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "method": "PUT",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit boat type and length unauthorized 401",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"401 status code\", function () {",
                        "    pm.response.to.have.status(401);",
                        "});",
                        "",
                        "pm.test(\"401 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You must be an authorized user to create or modify a boat\");",
                        "});",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "noauth"
                },
                "method": "PATCH",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit boat type and length 200",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"200 status code\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"content is valid\", function () {",
                        "    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
                        "    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Mega Yatch\");",
                        "    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PATCH",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit boat with no valid attributes 400",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"400 status code\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"400 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object has no valid attributes\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PATCH",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"color\": \"red\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit boat with invalid id 404",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"404 not found\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "",
                        "pm.test(\"404 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PATCH",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats/{{invalid_boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{invalid_boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit all boat attributes unauthorized 401",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"401 status code\", function () {",
                        "    pm.response.to.have.status(401);",
                        "});",
                        "",
                        "pm.test(\"401 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You must be an authorized user to create or modify a boat\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "noauth"
                },
                "method": "PUT",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Mega Yatch\",\r\n  \"length\": 400,\r\n  \"loads\": [],\r\n  \"owner\": \"{{owner_auth0_id}}\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit all boat attributes 303",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"303 status code\", function () {",
                        "    pm.response.to.have.status(303);",
                        "});",
                        "",
                        "pm.test(\"content is valid, including Boat-Location header\", function () {",
                        "    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey II\");",
                        "    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Mega Mega Yatch\");",
                        "    pm.expect(pm.response.json()[\"length\"]).to.eq(400);",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PUT",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Mega Yatch\",\r\n  \"length\": 400,\r\n  \"loads\": [],\r\n  \"owner\": \"{{owner_auth0_id}}\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit all boat attributes again with same values 303",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"303 status code\", function () {",
                        "    pm.response.to.have.status(303);",
                        "});",
                        "",
                        "pm.test(\"content is valid, including Boat-Location header\", function () {",
                        "    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey II\");",
                        "    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Mega Mega Yatch\");",
                        "    pm.expect(pm.response.json()[\"length\"]).to.eq(400);",
                        "    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
                        "    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
                        "});",
                        "",
                        ""
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PUT",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Mega Yatch\",\r\n  \"length\": 400,\r\n  \"loads\": [],\r\n  \"owner\": \"{{owner_auth0_id}}\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "edit only one boat attribute 400",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "c7a74f9c-2581-40ca-9996-ba107147f762",
                    "exec": [
                        "pm.test(\"400 bad request\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "",
                        "pm.test(\"400 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object does not have all required attributes\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "PUT",
                "header": [{
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                }],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"type\": \"Super Yatch\"\r\n}"
                },
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete boat unauthorized 401",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
                    "exec": [
                        "pm.test(\"401 status code\", function () {",
                        "    pm.response.to.have.status(401);",
                        "});",
                        "",
                        "pm.test(\"401 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"You must be an authorized user to create or modify a boat\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "noauth"
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete boat 204",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
                    "exec": [
                        "pm.test(\"204 no content\", function () {",
                        "    pm.response.to.have.status(204);",
                        "});",
                        "",
                        "pm.environment.unset(\"boat_id\");"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete boat wiht invalid id 404",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
                    "exec": [
                        "pm.test(\"404 not found\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "",
                        "pm.test(\"404 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{invalid_boat_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{invalid_boat_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete invalid load 404",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "00b996e8-52af-4a08-8ce2-22097177a90f",
                    "exec": [
                        "pm.test(\"404 status code\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "pm.test(\"400 error message\", function () {",
                        "     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");",
                        "});"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token}}",
                        "type": "string"
                    }]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/loads/{{invalid_load_id}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "loads",
                        "{{invalid_load_id}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "delete boat different owner 204",
            "event": [{
                "listen": "test",
                "script": {
                    "id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
                    "exec": [
                        "pm.test(\"204 no content\", function () {",
                        "    pm.response.to.have.status(204);",
                        "});",
                        "",
                        "pm.environment.unset(\"boat_id_different_owner\");"
                    ],
                    "type": "text/javascript"
                }
            }],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [{
                        "key": "token",
                        "value": "{{token2}}",
                        "type": "string"
                    }]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{app_url}}/boats/{{boat_id_different_owner}}",
                    "host": [
                        "{{app_url}}"
                    ],
                    "path": [
                        "boats",
                        "{{boat_id_different_owner}}"
                    ]
                }
            },
            "response": []
        }
    ],
    "event": [{
            "listen": "prerequest",
            "script": {
                "id": "42aac422-9426-4c94-b0f1-5e1b9218971e",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "id": "5e41c7b2-d777-46d4-b524-7cad7edb5875",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ],
    "protocolProfileBehavior": {}
}